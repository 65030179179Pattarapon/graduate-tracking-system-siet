import React, { useState, useEffect, useRef } from 'react';
import styles from './ProfilePage.module.css';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { 
    faCamera, faEdit, faTrash, faUserCircle, faGraduationCap, faSignature, 
    faPaperclip, faPencilAlt, faSave, faTimes, faClipboardCheck, faKey,
    faEye, faEyeSlash // üëà ‡πÄ‡∏û‡∏¥‡πà‡∏° 2 ‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ
} from '@fortawesome/free-solid-svg-icons';
import SignaturePad from 'react-signature-pad-wrapper';

    // Helper Functions
    const formatThaiDate = (isoString) => {
        if (!isoString) return '-';
        return new Date(isoString).toLocaleDateString('th-TH', { year: 'numeric', month: 'long', day: 'numeric' });
    };
    const getStatusClass = (status) => {
        if (!status) return styles.pending;
        const approved = ['‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤', '‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß', '‡∏ú‡πà‡∏≤‡∏ô', '‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå'];
        if (approved.includes(status)) return styles.approved;
        const rejected = ['‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥', '‡∏ï‡∏µ‡∏Å‡∏•‡∏±‡∏ö', '‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô', '‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå'];
        if (rejected.includes(status)) return styles.rejected;
        return styles.pending;
    };

    // Component ‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ç‡∏ä‡∏µ
const AccountManagementSection = ({ currentUser, setCurrentUser }) => {
    const [passwords, setPasswords] = useState({
        currentPassword: '',
        newPassword: '',
        confirmPassword: ''
    });
    const [isEditingPassword, setIsEditingPassword] = useState(false);
    
    // ‚úÖ 1. ‡πÄ‡∏û‡∏¥‡πà‡∏° State ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡πà‡∏≠‡∏á
    const [visibility, setVisibility] = useState({
        current: false,
        new: false,
        confirm: false
    });

    // ‚úÖ 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏•‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
    const toggleVisibility = (field) => {
        setVisibility(prev => ({ ...prev, [field]: !prev[field] }));
    };

    const handlePasswordChange = (e) => {
        const { name, value } = e.target;
        setPasswords(prev => ({ ...prev, [name]: value }));
    };

    const handleSavePassword = () => {
        if (!passwords.currentPassword || !passwords.newPassword || !passwords.confirmPassword) {
            alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô");
            return;
        }
        if (passwords.currentPassword !== currentUser.password) {
            alert("‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");
            return;
        }
        if (passwords.newPassword.length < 6) {
            alert("‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 6 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£");
            return;
        }
        if (passwords.newPassword !== passwords.confirmPassword) {
            alert("‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô");
            return;
        }

        const userEmail = localStorage.getItem("current_user");
        const allStudents = JSON.parse(localStorage.getItem('savedStudents') || '[]');
        const updatedStudents = allStudents.map(student => {
            if (student.email === userEmail) {
                return { ...student, password: passwords.newPassword };
            }
            return student;
        });

        localStorage.setItem('savedStudents', JSON.stringify(updatedStudents));
        setCurrentUser(prev => ({ ...prev, password: passwords.newPassword }));
        
        alert("‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß");
        setIsEditingPassword(false);
        setPasswords({ currentPassword: '', newPassword: '', confirmPassword: '' });
    };

    return (
        <section className={styles.profileCard}>
            <h3><FontAwesomeIcon icon={faKey} /> ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ç‡∏ä‡∏µ</h3>
            <div className={styles.profileDetails}>
                {!isEditingPassword ? (
                    <button className={styles.btn} onClick={() => setIsEditingPassword(true)}>
                        <FontAwesomeIcon icon={faPencilAlt} /> ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
                    </button>
                ) : (
                    <div className={styles.passwordForm}>
                        {/* ‚úÖ 3. ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á JSX ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ Input */}
                        <div className={styles.formGroup}>
                            <label>‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô</label>
                            <div className={styles.passwordInputWrapper}>
                                <input 
                                    type={visibility.current ? 'text' : 'password'} 
                                    name="currentPassword" 
                                    value={passwords.currentPassword} 
                                    onChange={handlePasswordChange} 
                                />
                                <FontAwesomeIcon 
                                    icon={visibility.current ? faEyeSlash : faEye} 
                                    className={styles.passwordIcon}
                                    onClick={() => toggleVisibility('current')}
                                />
                            </div>
                        </div>
                        <div className={styles.formGroup}>
                            <label>‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà</label>
                            <div className={styles.passwordInputWrapper}>
                                <input 
                                    type={visibility.new ? 'text' : 'password'} 
                                    name="newPassword" 
                                    value={passwords.newPassword} 
                                    onChange={handlePasswordChange} 
                                />
                                <FontAwesomeIcon 
                                    icon={visibility.new ? faEyeSlash : faEye} 
                                    className={styles.passwordIcon}
                                    onClick={() => toggleVisibility('new')}
                                />
                            </div>
                        </div>
                        <div className={styles.formGroup}>
                            <label>‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà</label>
                            <div className={styles.passwordInputWrapper}>
                                <input 
                                    type={visibility.confirm ? 'text' : 'password'} 
                                    name="confirmPassword" 
                                    value={passwords.confirmPassword} 
                                    onChange={handlePasswordChange} 
                                />
                                <FontAwesomeIcon 
                                    icon={visibility.confirm ? faEyeSlash : faEye} 
                                    className={styles.passwordIcon}
                                    onClick={() => toggleVisibility('confirm')}
                                />
                            </div>
                        </div>
                        <div className={styles.formActions}>
                            <button className={`${styles.btn} ${styles.btnSecondary}`} onClick={() => setIsEditingPassword(false)}>‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</button>
                            <button className={`${styles.btn} ${styles.btnPrimary}`} onClick={handleSavePassword}>‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô</button>
                        </div>
                    </div>
                )}
            </div>
        </section>
    );
};

function ProfilePage() {
    const [currentUser, setCurrentUser] = useState(null);
    const [processedData, setProcessedData] = useState({});
    const [isEditingPhone, setIsEditingPhone] = useState(false);
    const [phoneInput, setPhoneInput] = useState('');
    const [profileImage, setProfileImage] = useState('/assets/images/placeholder.png');
    const [signatureImage, setSignatureImage] = useState(null);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);
    
    const [imageToCrop, setImageToCrop] = useState(null);
    const [isCropModalOpen, setCropModalOpen] = useState(false);
    const cropperRef = useRef(null);

    const [isSignatureModalOpen, setSignatureModalOpen] = useState(false);
    const [signatureTab, setSignatureTab] = useState('draw');
    const signaturePadRef = useRef(null);
    const signatureFileInputRef = useRef(null);

    useEffect(() => {
        const loadProfileData = async () => {
            try {
                const userEmail = localStorage.getItem("current_user");
                if (!userEmail) throw new Error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ");

                const [students, advisors, programs, departments] = await Promise.all([
                    fetch("/data/student.json").then(res => res.json()),
                    fetch("/data/advisor.json").then(res => res.json()),
                    fetch("/data/structures/programs.json").then(res => res.json()),
                    fetch("/data/structures/departments.json").then(res => res.json()),
                ]);
                
                const user = students.find(s => s.email === userEmail);
                if (!user) throw new Error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤");
                
                const allUserDocuments = [...(user.documents || []), ...JSON.parse(localStorage.getItem('localStorage_pendingDocs') || '[]').filter(doc => doc.student_email === userEmail)];
                const userApprovedDocs = allUserDocuments.filter(doc => doc.status === '‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß' || doc.status === '‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥');

                const findAdvisorName = (id) => {
                    if (!id) return '-';
                    const advisor = advisors.find(a => a.advisor_id === id);
                    return advisor ? `${advisor.prefix_th}${advisor.first_name_th} ${advisor.last_name_th}`.trim() : '-';
                };

                const approvedForm2 = allUserDocuments.find(doc => doc.type === '‡∏ü‡∏≠‡∏£‡πå‡∏° 2' && (doc.status === '‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß' || doc.status === '‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥'));
                const approvedEngMasterDoc = allUserDocuments.find(doc => doc.title?.includes("‡∏õ‡∏£‡∏¥‡∏ç‡∏ç‡∏≤‡πÇ‡∏ó") && doc.type === '‡∏ú‡∏•‡∏™‡∏≠‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©' && (doc.status === '‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß' || doc.status === '‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå'));
                const approvedEngPhdDoc = allUserDocuments.find(doc => doc.title?.includes("‡∏õ‡∏£‡∏¥‡∏ç‡∏ç‡∏≤‡πÄ‡∏≠‡∏Å") && doc.type === '‡∏ú‡∏•‡∏™‡∏≠‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©' && (doc.status === '‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß' || doc.status === '‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå'));
                const approvedQEDoc = allUserDocuments.find(doc => doc.type === '‡∏ú‡∏•‡∏™‡∏≠‡∏ö‡∏ß‡∏±‡∏î‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥' && (doc.status === '‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß' || doc.status === '‡∏ú‡πà‡∏≤‡∏ô'));

                setCurrentUser(user);
                setPhoneInput(user.phone || '');
                setProcessedData({
                    programName: programs.find(p => p.id === user.program_id)?.name || '-',
                    departmentName: departments.find(d => d.id === user.department_id)?.name || '-',
                    mainAdvisorName: findAdvisorName(user.main_advisor_id),
                    coAdvisor1Name: findAdvisorName(user.co_advisor1_id),
                    coAdvisor2Name: findAdvisorName(approvedForm2?.committee?.co_advisor2_id),
                    approvedEngMasterDoc,
                    approvedEngPhdDoc,
                    approvedQEDoc,
                    allApprovedFiles: userApprovedDocs.flatMap(doc => doc.files ? doc.files.map(file => ({...file, formTitle: doc.title})) : [])
                });

                const savedProfileImg = localStorage.getItem(`${userEmail}_profile_image`);
                if (savedProfileImg) setProfileImage(savedProfileImg);
                const savedSignatureImg = localStorage.getItem(`${userEmail}_signature_data`);
                if (savedSignatureImg) setSignatureImage(savedSignatureImg);

            } catch (err) {
                setError(err.message);
                console.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå:", err);
            } finally {
                setLoading(false);
            }
        };
        loadProfileData();
    }, []);

    const handleSavePhone = () => {
        const userEmail = localStorage.getItem("current_user");
        if (!userEmail) {
            alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô");
            return;
        }

        // 1. ‚úÖ ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å Local Storage
        const allStudents = JSON.parse(localStorage.getItem('savedStudents') || '[]');

        // 2. ‚úÖ ‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏Ñ‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        const updatedStudents = allStudents.map(student => {
            if (student.email === userEmail) {
                // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏à‡∏≠‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏Ñ‡∏ô‡∏ô‡∏µ‡πâ ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ object ‡πÉ‡∏´‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
                return { ...student, phone: phoneInput };
            }
            // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ student ‡πÄ‡∏î‡∏¥‡∏°
            return student;
        });

        // 3. ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Å‡∏•‡∏±‡∏ö‡∏•‡∏á Local Storage
        localStorage.setItem('savedStudents', JSON.stringify(updatedStudents));

        // 4. ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï State ‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏´‡πá‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
        setCurrentUser(prev => ({ ...prev, phone: phoneInput }));
        
        alert("‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß");
        setIsEditingPhone(false);
    };

    const handleProfilePictureChange = (e) => {
        e.preventDefault();
        const file = e.target.files[0];
        if (file && file.type.startsWith('image/')) {
            const reader = new FileReader();
            reader.onload = () => {
                setImageToCrop(reader.result);
                setCropModalOpen(true);
            };
            reader.readAsDataURL(file);
        }
        e.target.value = '';
    };

    const handleConfirmCrop = () => {
        if (cropperRef.current?.cropper) {
            const croppedImageData = cropperRef.current.cropper.getCroppedCanvas({
                width: 256, height: 256,
            }).toDataURL('image/png');
            setProfileImage(croppedImageData);
            const userEmail = localStorage.getItem("current_user");
            localStorage.setItem(`${userEmail}_profile_image`, croppedImageData);
            setCropModalOpen(false);
            setImageToCrop(null);
        }
    };
    
    const handleSaveSignature = () => {
        const userEmail = localStorage.getItem("current_user");
        if (!userEmail) return;
        let signatureData = null;
        if (signatureTab === 'draw') {
            if (signaturePadRef.current?.isEmpty()) {
                alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ß‡∏≤‡∏î‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì");
                return;
            }
            signatureData = signaturePadRef.current.toDataURL('image/png');
            finalizeSaveSignature(userEmail, signatureData);
        } else {
            const file = signatureFileInputRef.current?.files[0];
            if (!file) {
                alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û");
                return;
            }
            const reader = new FileReader();
            reader.onloadend = () => {
                finalizeSaveSignature(userEmail, reader.result);
            };
            reader.readAsDataURL(file);
        }
    };

    const finalizeSaveSignature = (userEmail, data) => {
        setSignatureImage(data);
        localStorage.setItem(`${userEmail}_signature_data`, data);
        localStorage.setItem(`${userEmail}_signed`, "true");
        alert("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß");
        setSignatureModalOpen(false);
    }

    const handleDeleteSignature = () => {
        if (window.confirm("‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô‡∏î‡∏¥‡∏à‡∏¥‡∏ó‡∏±‡∏•‡πÉ‡∏ä‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà? ‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏à‡∏∞‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏±‡∏ô‡∏ó‡∏µ")) {
            const userEmail = localStorage.getItem("current_user");
            if (userEmail) {
                localStorage.removeItem(`${userEmail}_signature_data`);
                localStorage.removeItem(`${userEmail}_signed`);
                setSignatureImage(null);
                
                alert("‡∏•‡∏ö‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠");
                
                setSignatureModalOpen(true);
            }
        }
    };

    if (loading) return <div className={styles.loadingText}>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå...</div>;
    if (error) return <div className={styles.errorText}>‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {error}</div>;
    if (!currentUser) return <div className={styles.loadingText}>‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ</div>;

    const fullname = `${currentUser.prefix_th} ${currentUser.first_name_th} ${currentUser.last_name_th}`.trim();

    return (
        <>
            <main className={styles.profileContainer}>
                <h1><FontAwesomeIcon icon={faUserCircle} /> ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô</h1>
                <div className={styles.profileLayout}>
                    {/* --- Left Column --- */}
                    <div className={styles.mainProfileColumn}>
                        <section className={styles.profileCard}>
                            <div className={styles.profileHeader}>
                                <div className={styles.profilePictureWrapper}>
                                    <img src={profileImage} alt="‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå" />
                                    <label htmlFor="profile-picture-input" className={styles.editPictureBtn}>
                                        <FontAwesomeIcon icon={faCamera} />
                                    </label>
                                    <input type="file" id="profile-picture-input" style={{display: 'none'}} accept="image/*" onChange={handleProfilePictureChange}/>
                                </div>
                                <div className={styles.profileNameGroup}>
                                    <h2>{fullname}</h2>
                                    <p>‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤: {currentUser.student_id}</p>
                                </div>
                            </div>
                            <div className={styles.profileDetails}>
                                <h3>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß</h3>
                                <div className={styles.detailsGrid}>
                                    <div><label>‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤:</label><span>{currentUser.degree || '-'}</span></div>
                                    <div><label>‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô:</label><span>{currentUser.plan || '-'}</span></div>
                                    <div><label>‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤:</label><span>{currentUser.admit_type || '-'}</span></div>
                                    <div><label>‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£/‡∏™‡∏≤‡∏Ç‡∏≤:</label><span>{processedData.programName}</span></div>
                                    <div><label>‡∏†‡∏≤‡∏Ñ‡∏ß‡∏¥‡∏ä‡∏≤:</label><span>{processedData.departmentName}</span></div>
                                    <div><label>‡∏Ñ‡∏ì‡∏∞:</label><span>{currentUser.faculty || '-'}</span></div>
                                    <div><label>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:</label><span className={getStatusClass(currentUser.status)}>{currentUser.status || '-'}</span></div>
                                    <div>
                                        <label>‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå:</label>
                                        <div className={styles.editableField}>
                                            {isEditingPhone ? (
                                                <>
                                                    <input type="tel" value={phoneInput} onChange={(e) => setPhoneInput(e.target.value)} />
                                                    <button onClick={handleSavePhone} className={styles.btnIcon} title="‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å"><FontAwesomeIcon icon={faSave} /></button>
                                                    <button onClick={() => setIsEditingPhone(false)} className={styles.btnIcon} title="‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å"><FontAwesomeIcon icon={faTimes} /></button>
                                                </>
                                            ) : (
                                                <>
                                                    <span>{currentUser.phone || '-'}</span>
                                                    <button onClick={() => setIsEditingPhone(true)} className={styles.btnIcon} title="‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç"><FontAwesomeIcon icon={faPencilAlt} /></button>
                                                </>
                                            )}
                                        </div>
                                    </div>
                                    <div><label>‡∏≠‡∏µ‡πÄ‡∏°‡∏•:</label><span>{currentUser.email || '-'}</span></div>
                                </div>
                            </div>
                        </section>

                         {/* ‚úÖ‚úÖ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ Component ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡∏°‡∏≤‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ ‚úÖ‚úÖ‚úÖ */}
                        <AccountManagementSection currentUser={currentUser} setCurrentUser={setCurrentUser} />

                        <section className={styles.profileCard}>
                            <h3><FontAwesomeIcon icon={faSignature} /> ‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô‡∏î‡∏¥‡∏à‡∏¥‡∏ó‡∏±‡∏•</h3>
                               <div className={styles.signatureDisplayArea}>
                                 {signatureImage ? <img src={signatureImage} alt="‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô" /> : <p>‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô</p>}
                            </div>
                            <div className={styles.signatureActions}>
                                <button className={styles.btn} onClick={() => setSignatureModalOpen(true)}><FontAwesomeIcon icon={faEdit} /> ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô</button>
                                <button className={`${styles.btn} ${styles.btnDanger}`} onClick={handleDeleteSignature}><FontAwesomeIcon icon={faTrash} /> ‡∏•‡∏ö‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô</button>
                            </div>
                        </section>
                    </div>

                    {/* --- Right Column --- */}
                    <div className={styles.sideProfileColumn}>
                        {/* ‚úÖ 1. ‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏ô‡∏¥‡∏û‡∏ô‡∏ò‡πå‡πÅ‡∏•‡∏∞‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤ */}
                        <section className={styles.profileCard}>
                            <h3><FontAwesomeIcon icon={faGraduationCap} /> ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏ô‡∏¥‡∏û‡∏ô‡∏ò‡πå</h3>
                            <div className={styles.statusGroup}>
                                <h4 className={styles.groupTitle}>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏ô‡∏¥‡∏û‡∏ô‡∏ò‡πå</h4>
                                <ul className={styles.statusListDetailed}>
                                    <li><label>‡∏ä‡∏∑‡πà‡∏≠ (‡πÑ‡∏ó‡∏¢):</label><span>{currentUser.thesis_title_th || '-'}</span></li>
                                    <li><label>‡∏ä‡∏∑‡πà‡∏≠ (‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©):</label><span>{currentUser.thesis_title_en || '-'}</span></li>
                                </ul>
                            </div>
                            <div className={styles.statusGroup}>
                                <h4 className={styles.groupTitle}>‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤</h4>
                                <ul className={styles.statusListDetailed}>
                                    <li><label>‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡∏´‡∏•‡∏±‡∏Å:</label><span>{processedData.mainAdvisorName}</span></li>
                                    <li><label>‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡∏£‡πà‡∏ß‡∏° 1:</label><span>{processedData.coAdvisor1Name}</span></li>
                                    <li><label>‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡∏£‡πà‡∏ß‡∏° 2:</label><span>{processedData.coAdvisor2Name}</span></li>
                                </ul>
                            </div>
                        </section>

                        {/* ‚úÖ‚úÖ‚úÖ ‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‚úÖ‚úÖ‚úÖ */}
                        <section className={styles.profileCard}>
                            <h3><FontAwesomeIcon icon={faClipboardCheck} /> ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£</h3>

                            {/* --- 1. ‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ö‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡πÅ‡∏•‡∏∞‡πÄ‡∏Ñ‡πâ‡∏≤‡πÇ‡∏Ñ‡∏£‡∏á --- */}
                            <div className={styles.statusGroup}>
                                <h4 className={styles.groupTitle}>‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ö‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡πÅ‡∏•‡∏∞‡πÄ‡∏Ñ‡πâ‡∏≤‡πÇ‡∏Ñ‡∏£‡∏á</h4>
                                <ul className={styles.statusListDetailed}>
                                    <li><label>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ö:</label><span className={getStatusClass(currentUser.proposal_status)}>{currentUser.proposal_status || '-'}</span></li>
                                    <li><label>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏ö‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠:</label><span>{formatThaiDate(currentUser.proposal_submission_date)}</span></li>
                                    <li><label>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠:</label><span>{formatThaiDate(currentUser.proposal_approval_date)}</span></li>
                                </ul>
                            </div>

                            {/* --- 2. ‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ö‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏ô‡∏¥‡∏û‡∏ô‡∏ò‡πå‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢ --- */}
                            <div className={styles.statusGroup}>
                                <h4 className={styles.groupTitle}>‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ö‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏ô‡∏¥‡∏û‡∏ô‡∏ò‡πå‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢</h4>
                                <ul className={styles.statusListDetailed}>
                                      <li><label>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ö:</label><span className={getStatusClass(currentUser.final_defense_status)}>{currentUser.final_defense_status || '-'}</span></li>
                                      <li><label>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏ö‡∏à‡∏ö:</label><span>{formatThaiDate(currentUser.final_defense_date)}</span></li>
                                      <li><label>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤:</label><span>{formatThaiDate(currentUser.graduation_date)}</span></li>
                                </ul>
                            </div>

                            {/* --- 3. ‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ö‡∏ß‡∏±‡∏î‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥ --- */}
                            <div className={styles.statusGroup}>
                                <h4 className={styles.groupTitle}>‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ö‡∏ß‡∏±‡∏î‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥ (QE)</h4>
                                <ul className={styles.statusListDetailed}>
                                    <li><label>‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ö:</label><span className={getStatusClass(processedData.approvedQEDoc?.status)}>{processedData.approvedQEDoc?.status || '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏¢‡∏∑‡πà‡∏ô'}</span></li>
                                    <li><label>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ö:</label><span>{formatThaiDate(processedData.approvedQEDoc?.action_date)}</span></li>
                                </ul>
                            </div>

                            {/* --- 4. ‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏© (‡∏õ‡∏£‡∏¥‡∏ç‡∏ç‡∏≤‡πÇ‡∏ó) --- */}
                            {currentUser.degree === '‡∏õ‡∏£‡∏¥‡∏ç‡∏ç‡∏≤‡πÇ‡∏ó' && (
                                <div className={styles.statusGroup}>
                                    <h4 className={styles.groupTitle}>‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏© (‡∏õ‡∏£‡∏¥‡∏ç‡∏ç‡∏≤‡πÇ‡∏ó)</h4>
                                    <ul className={styles.statusListDetailed}>
                                        <li><label>‡∏ú‡∏•‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤:</label><span>-</span></li>
                                        <li><label>‡∏ú‡∏•‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏à‡∏ö:</label><span>-</span></li>
                                        <li><label>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå:</label><span>{formatThaiDate(processedData.approvedEngMasterDoc?.action_date)}</span></li>
                                    </ul>
                                </div>
                            )}

                            {/* --- 5. ‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏© (‡∏õ‡∏£‡∏¥‡∏ç‡∏ç‡∏≤‡πÄ‡∏≠‡∏Å) --- */}
                            {currentUser.degree === '‡∏õ‡∏£‡∏¥‡∏ç‡∏ç‡∏≤‡πÄ‡∏≠‡∏Å' && (
                                <div className={styles.statusGroup}>
                                    <h4 className={styles.groupTitle}>‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏© (‡∏õ‡∏£‡∏¥‡∏ç‡∏ç‡∏≤‡πÄ‡∏≠‡∏Å)</h4>
                                    <ul className={styles.statusListDetailed}>
                                        <li><label>‡∏ú‡∏•‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤:</label><span>-</span></li>
                                        <li><label>‡∏ú‡∏•‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏à‡∏ö:</label><span>-</span></li>
                                        <li><label>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå:</label><span>{formatThaiDate(processedData.approvedEngPhdDoc?.action_date)}</span></li>
                                    </ul>
                                </div>
                            )}
                         </section>

                          <section className={styles.profileCard}>
                            <h3><FontAwesomeIcon icon={faPaperclip} /> ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÅ‡∏ô‡∏ö‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö (‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß)</h3>
                              <ul className={styles.fileList}>
                                {processedData.allApprovedFiles && processedData.allApprovedFiles.length > 0 ? (
                                    processedData.allApprovedFiles.map((file, index) => (
                                        <li key={index}>
                                            <label>{file.type} <span className={styles.textMuted}>(‡∏à‡∏≤‡∏Å: {file.formTitle})</span></label>
                                            <a href="#" onClick={(e) => e.preventDefault()}>{file.name}</a>
                                        </li>
                                    ))
                                ) : (
                                    <li className={styles.loadingText}>‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÅ‡∏ô‡∏ö‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß</li>
                                )}
                              </ul>
                         </section>
                    </div>
                </div>
            </main>

            {isCropModalOpen && (
                <div className={styles.modalOverlay}>
                    <div className={`${styles.modalBox} ${styles.cropModalBox}`}>
                        <h3>‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå</h3>
                        <div className={styles.cropperContainer}>
                            <Cropper
                                ref={cropperRef}
                                src={imageToCrop}
                                style={{ height: 400, width: '100%' }}
                                aspectRatio={1 / 1}
                                viewMode={1}
                                background={false}
                                responsive={true}
                                checkOrientation={false}
                                guides={true}
                            />
                        </div>
                        <div className={styles.modalActions}>
                            <button onClick={() => setCropModalOpen(false)} className={`${styles.btn} ${styles.btnSecondary}`}>‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</button>
                            <button onClick={handleConfirmCrop} className={`${styles.btn} ${styles.btnPrimary}`}>‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô</button>
                        </div>
                    </div>
                </div>
            )}
            
            {isSignatureModalOpen && (
                <div className={styles.modalOverlay}>
                     <div className={`${styles.modalBox} ${styles.signatureModalBox}`}>
                          <h3>‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô‡∏î‡∏¥‡∏à‡∏¥‡∏ó‡∏±‡∏•</h3>
                          <div className={styles.tabNav}>
                              <button className={`${styles.tabBtn} ${signatureTab === 'draw' ? styles.active : ''}`} onClick={() => setSignatureTab('draw')}>‡∏ß‡∏≤‡∏î‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô</button>
                              <button className={`${styles.tabBtn} ${signatureTab === 'upload' ? styles.active : ''}`} onClick={() => setSignatureTab('upload')}>‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î</button>
                          </div>
                          <div className={styles.tabContent}>
                            {signatureTab === 'draw' && (
                                <div className={styles.canvasWrapper}>
                                    <SignaturePad 
                                        ref={signaturePadRef}
                                        options={{ penColor: 'black', backgroundColor: 'rgb(255,255,255)'}}
                                        canvasProps={{ className: styles.signatureCanvas }} 
                                    />
                                </div>
                            )}
                            {signatureTab === 'upload' && (
                                <div className={styles.uploadPlaceholder}>
                                    <label htmlFor="signature-upload-input" className={styles.btn}>
                                        <FontAwesomeIcon icon={faCamera} /> ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
                                    </label>
                                    <input type="file" id="signature-upload-input" ref={signatureFileInputRef} accept="image/*" style={{display: 'none'}} />
                                </div>
                            )}
                          </div>
                          <div className={styles.modalActionsStacked}>
                              <div className={styles.mainActions}>
                                  <button className={`${styles.btn} ${styles.btnSecondary}`} onClick={() => setSignatureModalOpen(false)}>‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</button>
                                  <button className={`${styles.btn} ${styles.btnPrimary}`} onClick={handleSaveSignature}>‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å</button>
                              </div>
                              <div className={styles.secondaryActions}>
                                  <button className={styles.btnText} onClick={() => {
                                      if (signatureTab === 'draw' && signaturePadRef.current) {
                                          signaturePadRef.current.clear();
                                      } else {
                                          if (signatureFileInputRef.current) signatureFileInputRef.current.value = null;
                                      }
                                  }}>‡∏•‡πâ‡∏≤‡∏á</button>
                              </div>
                          </div>
                     </div>
                </div>
            )}
        </>
    );
}

export default ProfilePage;

