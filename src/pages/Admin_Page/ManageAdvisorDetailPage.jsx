import React, { useState, useEffect, useMemo, useCallback } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import styles from './ManageUsersPage.module.css'; // ‡πÉ‡∏ä‡πâ‡∏™‡πÑ‡∏ï‡∏•‡πå‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ô
import detailStyles from './ManageAdvisorDetailPage.module.css'; // ‡πÉ‡∏ä‡πâ‡∏™‡πÑ‡∏ï‡∏•‡πå‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { 
    faUserCog, faUser, faSitemap, faUserGraduate, faFileAlt, 
    faArrowLeft, faSave, faPlus, faTrashAlt, faEye, faEyeSlash, faSyncAlt,
    faUserTie,
    faPencilAlt, // üëà ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç"
    faTimes // üëà ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å"
} from '@fortawesome/free-solid-svg-icons';
import _ from 'lodash';
import AdviseeTable from '../../components/admin/AdviseeTable';

// --- Constants for Dropdowns ---
const THAI_PREFIXES = ['‡∏ô‡∏≤‡∏¢', '‡∏ô‡∏≤‡∏á', '‡∏ô‡∏≤‡∏á‡∏™‡∏≤‡∏ß', '‡∏≠.', '‡∏ú‡∏®.', '‡∏£‡∏®.', '‡∏®.', '‡∏ú‡∏®.‡∏î‡∏£.', '‡∏£‡∏®.‡∏î‡∏£.', '‡∏®.‡∏î‡∏£.'];
const ENG_PREFIXES = ['Mr.', 'Mrs.', 'Ms.', 'Lecturer', 'Asst. Prof.', 'Assoc. Prof.', 'Prof.', 'Asst. Prof. Dr.', 'Assoc. Prof. Dr.', 'Prof. Dr.'];
const GENDERS = ['‡∏ä‡∏≤‡∏¢', '‡∏´‡∏ç‡∏¥‡∏á', '‡∏≠‡∏∑‡πà‡∏ô‡πÜ'];
const ADVISOR_TYPES = ["‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡∏õ‡∏£‡∏∞‡∏à‡∏≥", "‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£", "‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£", "‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡∏ö‡∏±‡∏ì‡∏ë‡∏¥‡∏ï‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏†‡∏≤‡∏¢‡πÉ‡∏ô", "‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡∏ö‡∏±‡∏ì‡∏ë‡∏¥‡∏ï‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å", "‡∏ú‡∏π‡πâ‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£"];
const ADVISOR_ROLES = ["‡∏™‡∏≠‡∏ô", "‡∏™‡∏≠‡∏ö", "‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏ô‡∏¥‡∏û‡∏ô‡∏ò‡πå", "‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏ô‡∏¥‡∏û‡∏ô‡∏ò‡πå‡∏£‡πà‡∏ß‡∏°", "‡∏Ñ‡∏ì‡∏ö‡∏î‡∏µ", "‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏Ñ‡∏ì‡∏ö‡∏î‡∏µ"];
const ASSISTANT_DEAN_DEPTS = ["‡∏ß‡∏¥‡∏ä‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏ß‡∏¥‡∏à‡∏±‡∏¢", "‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤", "‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£"];

// --- Sub-Components for each section ---

const Sidebar = ({ advisor, activeSection, setActiveSection, onBack }) => (
    <aside className={detailStyles.sidebar}>
        <div className={detailStyles.studentProfileCard}>
            <div className={detailStyles.profileImageContainer}>
                {advisor.profile_img ? (
                    <img src={advisor.profile_img} alt="Advisor Profile" className={detailStyles.profileImage} />
                ) : (
                    <div className={detailStyles.noImagePlaceholder}>‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏†‡∏≤‡∏û</div>
                )}
            </div>
            <div className={detailStyles.studentName}>{advisor.prefix_th}{advisor.first_name_th} {advisor.last_name_th}</div>
            <div className={detailStyles.studentEmail}>{advisor.email}</div>
        </div>
        <hr className={detailStyles.divider} />
        {[
            { id: 'account', icon: faUserCog, text: '‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ç‡∏ä‡∏µ' },
            { id: 'info', icon: faUser, text: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ' },
            { id: 'roles', icon: faSitemap, text: '‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡πÅ‡∏•‡∏∞‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£' },
            { id: 'advisees', icon: faUserGraduate, text: '‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡πÉ‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤' },
            { id: 'publications', icon: faFileAlt, text: '‡∏ú‡∏•‡∏á‡∏≤‡∏ô‡∏ï‡∏µ‡∏û‡∏¥‡∏°‡∏û‡πå' },
        ].map(item => (
            <button key={item.id} className={`${detailStyles.sidebarBtn} ${activeSection === item.id ? detailStyles.active : ''}`} onClick={() => setActiveSection(item.id)}>
                <FontAwesomeIcon icon={item.icon} /><span>{item.text}</span>
            </button>
        ))}
        <hr className={detailStyles.divider} />
        <button className={detailStyles.sidebarBtn} onClick={onBack}>
            <FontAwesomeIcon icon={faArrowLeft} /><span>‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠</span>
        </button>
    </aside>
);

const AccountSection = ({ data, onInputChange }) => {
    const [showPassword, setShowPassword] = useState(false);
    
    const generatePassword = () => {
        const chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()';
        let password = '';
        for (let i = 0; i < 12; i++) {
            password += chars.charAt(Math.floor(Math.random() * chars.length));
        }
        onInputChange({ target: { name: 'password', value: password } });
        onInputChange({ target: { name: 'confirm_password', value: password } });
    };

    return (
        <div className={detailStyles.card}>
            <h3><FontAwesomeIcon icon={faUserCog} /> ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ç‡∏ä‡∏µ</h3>
            <div className={detailStyles.cardBody}>
                <div className={detailStyles.formSection}>
                    <h4>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô</h4>
                    <div className={detailStyles.formGrid}>
                        <div className={detailStyles.formGroup}>
                            <label>‡∏≠‡∏µ‡πÄ‡∏°‡∏• (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö)</label>
                            <input type="email" value={data.email || ''} disabled />
                        </div>
                        <div className={detailStyles.formGroup}>
                            <label>‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô</label>
                            <input 
                                type="password"
                                value="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢" 
                                readOnly
                                className={detailStyles.readOnlyInput}
                            />
                        </div>
                    </div>
                </div>
                
                <div className={detailStyles.formSection}>
                    <h4>‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ç‡∏ä‡∏µ</h4>
                    <div className={detailStyles.formGrid}>
                        <div className={detailStyles.formGroup} style={{ gridColumn: '1 / -1' }}>
                            <label>‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÉ‡∏´‡∏°‡πà (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö)</label>
                            <input 
                                type="email" 
                                name="email"
                                placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÉ‡∏´‡∏°‡πà (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô)" 
                                value={data.email || ''}
                                onChange={onInputChange}
                            />
                        </div>
                        <div className={detailStyles.formGroup}>
                            <label>‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà</label>
                            <div className={detailStyles.passwordInputWrapper}>
                                <input 
                                    type={showPassword ? 'text' : 'password'}
                                    name="password" 
                                    placeholder="‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡πà‡∏≤‡∏á‡πÑ‡∏ß‡πâ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô"
                                    value={data.password || ''}
                                    onChange={onInputChange}
                                />
                                <FontAwesomeIcon 
                                    icon={faSyncAlt} 
                                    className={detailStyles.passwordIcon}
                                    onClick={generatePassword}
                                    title="‡∏™‡∏∏‡πà‡∏°‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà"
                                />
                            </div>
                        </div>
                        <div className={detailStyles.formGroup}>
                            <label>‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà</label>
                            <div className={detailStyles.passwordInputWrapper}>
                                <input 
                                    type={showPassword ? 'text' : 'password'} 
                                    name="confirm_password" 
                                    value={data.confirm_password || ''} 
                                    onChange={onInputChange}
                                    placeholder="‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà"
                                />
                                <FontAwesomeIcon 
                                    icon={showPassword ? faEyeSlash : faEye} 
                                    className={detailStyles.passwordIcon}
                                    style={{ right: '40px' }} 
                                    onClick={() => setShowPassword(!showPassword)}
                                />
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    );
};

const InfoSection = ({ data, onInputChange }) => (
    <div className={detailStyles.card}>
        <h3><FontAwesomeIcon icon={faUser} /> ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ</h3>
        <div className={detailStyles.cardBody}>
            <div className={`${detailStyles.formGrid} ${detailStyles.fourCols}`} style={{ marginBottom: '25px' }}>
                <div className={detailStyles.formGroup}> 
                    <label>‡∏£‡∏´‡∏±‡∏™‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå</label>
                    <input type="text" value={data.advisor_id || ''} disabled />
                </div>
            </div>
            <div className={`${detailStyles.formGrid} ${detailStyles.fourCols}`} style={{ marginBottom: '25px' }}>
                <div className={detailStyles.formGroup}><label>‡∏Ñ‡∏≥‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤/‡∏¢‡∏® (‡πÑ‡∏ó‡∏¢)</label><select name="prefix_th" value={data.prefix_th || ''} onChange={onInputChange}>{THAI_PREFIXES.map(p => <option key={p} value={p}>{p}</option>)}</select></div>
                <div className={detailStyles.formGroup}><label>‡∏ä‡∏∑‡πà‡∏≠ (‡πÑ‡∏ó‡∏¢)</label><input type="text" name="first_name_th" value={data.first_name_th || ''} onChange={onInputChange} /></div>
                <div className={detailStyles.formGroup}><label>‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏≤‡∏á (‡πÑ‡∏ó‡∏¢)</label><input type="text" name="middle_name_th" value={data.middle_name_th || ''} onChange={onInputChange} /></div>
                <div className={detailStyles.formGroup}><label>‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏• (‡πÑ‡∏ó‡∏¢)</label><input type="text" name="last_name_th" value={data.last_name_th || ''} onChange={onInputChange} /></div>
            </div>
            <div className={`${detailStyles.formGrid} ${detailStyles.fourCols}`} style={{ marginBottom: '25px' }}>
                <div className={detailStyles.formGroup}><label>‡∏Ñ‡∏≥‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤ (‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©)</label><select name="prefix_en" value={data.prefix_en || ''} onChange={onInputChange}>{ENG_PREFIXES.map(p => <option key={p} value={p}>{p}</option>)}</select></div>
                <div className={detailStyles.formGroup}><label>First Name (‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©)</label><input type="text" name="first_name_en" value={data.first_name_en || ''} onChange={onInputChange} /></div>
                <div className={detailStyles.formGroup}><label>Middle Name (‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©)</label><input type="text" name="middle_name_en" value={data.middle_name_en || ''} onChange={onInputChange} /></div>
                <div className={detailStyles.formGroup}><label>Last Name (‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©)</label><input type="text" name="last_name_en" value={data.last_name_en || ''} onChange={onInputChange} /></div>
            </div>
            <div className={`${detailStyles.formGrid} ${detailStyles.fourCols}`} style={{ marginBottom: '25px' }}>
                <div className={detailStyles.formGroup}><label>‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠</label><input type="email" name="contact_email" value={data.contact_email || ''} onChange={onInputChange} /></div>
                <div className={detailStyles.formGroup}><label>‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏´‡∏•‡∏±‡∏Å</label><input type="tel" name="phone" value={data.phone || ''} onChange={onInputChange} /></div>
                <div className={detailStyles.formGroup}><label>‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏™‡∏≥‡∏£‡∏≠‡∏á</label><input type="tel" name="secondary_phone" value={data.secondary_phone || ''} onChange={onInputChange} /></div>
                <div className={detailStyles.formGroup}><label>‡∏´‡πâ‡∏≠‡∏á/‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô</label><input type="text" name="office_location" value={data.office_location || ''} onChange={onInputChange} /></div>
            </div>
            <div className={`${detailStyles.formGrid} ${detailStyles.fourCols}`}>
                <div className={detailStyles.formGroup}>
                    <label>‡πÄ‡∏û‡∏®</label>
                    <select name="gender" value={data.gender || ''} onChange={onInputChange}>
                        {GENDERS.map(g => <option key={g} value={g}>{g}</option>)}
                    </select>
                    
                    {/* ‚úÖ‚úÖ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÅ‡∏•‡∏∞ input ‡∏ô‡∏µ‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ ‚úÖ‚úÖ‚úÖ */}
                    {data.gender === '‡∏≠‡∏∑‡πà‡∏ô‡πÜ' && (
                        <input
                            type="text"
                            name="gender_other" // ‡∏ä‡∏∑‡πà‡∏≠ state ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ
                            value={data.gender_other || ''}
                            onChange={onInputChange}
                            placeholder="‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏∞‡∏ö‡∏∏"
                            style={{ marginTop: '10px' }} // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô
                        />
                    )}
                </div>
            </div>

        </div>
    </div>
);

// ‚úÖ‚úÖ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç RolesSection ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ï‡∏≤‡∏°‡∏ô‡∏µ‡πâ ‚úÖ‚úÖ‚úÖ
const RolesSection = ({ data, onInputChange, onArrayChange, allPrograms }) => {
    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡∏≠‡∏á Checkbox
    const handleRoleChange = (e) => {
        const { name, checked } = e.target;
        const currentRoles = data.roles || [];
        const updatedRoles = checked
            ? [...currentRoles, name]
            : currentRoles.filter(role => role !== name);
        onArrayChange('roles', updatedRoles);
    };

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏ñ‡∏ß‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£
    const handleAddProgram = () => {
        const currentPrograms = data.assigned_programs || [];
        // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° ID ‡∏ß‡πà‡∏≤‡∏á‡πÜ ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô Array
        onArrayChange('assigned_programs', [...currentPrograms, '']); 
    };

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏ö‡πÅ‡∏ñ‡∏ß‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£
    const handleRemoveProgram = (index) => {
        const updatedPrograms = (data.assigned_programs || []).filter((_, i) => i !== index);
        onArrayChange('assigned_programs', updatedPrograms);
    };
    
    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô‡πÅ‡∏ñ‡∏ß‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£
    const handleProgramChange = (index, newProgramId) => {
        const updatedPrograms = (data.assigned_programs || []).map((programId, i) => 
            i === index ? Number(newProgramId) : programId // ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô Array ‡∏ï‡∏≤‡∏° index
        );
        onArrayChange('assigned_programs', updatedPrograms);
    };

    return (
        <>
            {/* --- Card 1: ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå --- */}
            <div className={detailStyles.card}>
                <h3><FontAwesomeIcon icon={faUserTie} /> ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå</h3>
                <div className={detailStyles.cardBody}>
                    <div className={`${detailStyles.formGrid} ${detailStyles.oneCol}`}>
                        <select name="type" value={data.type || ''} onChange={onInputChange}>
                            <option value="">-- ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó --</option>
                            {ADVISOR_TYPES.map(type => <option key={type} value={type}>{type}</option>)}
                        </select>
                    </div>
                </div>
            </div>

            {/* --- Card 2: ‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà --- */}
            <div className={detailStyles.card}>
                <h3><FontAwesomeIcon icon={faSitemap} /> ‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà</h3>
                <div className={detailStyles.cardBody}>
                    <div className={`${detailStyles.formGrid} ${detailStyles.threeCols}`}>
                        {ADVISOR_ROLES.map(role => (
                            <div key={role} className={detailStyles.formGroup}>
                                <label className={detailStyles.checkboxContainer}>
                                    <input
                                        type="checkbox"
                                        name={role}
                                        checked={(data.roles || []).includes(role)}
                                        onChange={handleRoleChange}
                                    />
                                    <span className={detailStyles.checkmark}></span> {role}
                                </label>
                            </div>
                        ))}
                    </div>
                    {(data.roles || []).includes('‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏Ñ‡∏ì‡∏ö‡∏î‡∏µ') && (
                        <div className={`${detailStyles.formGrid} ${detailStyles.oneCol}`} style={{marginTop: '15px'}}>
                            <div className={detailStyles.formGroup}>
                                <label>‡∏ù‡πà‡∏≤‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏Ñ‡∏ì‡∏ö‡∏î‡∏µ</label>
                                <select name="assistant_dean_dept" value={data.assistant_dean_dept || ''} onChange={onInputChange}>
                                    <option value="">-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ù‡πà‡∏≤‡∏¢ --</option>
                                    {ASSISTANT_DEAN_DEPTS.map(dept => <option key={dept} value={dept}>{dept}</option>)}
                                </select>
                            </div>
                        </div>
                    )}
                </div>
            </div>

            {/* --- Card 3: ‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢ --- */}
            <div className={detailStyles.card}>
                <h3><FontAwesomeIcon icon={faUserGraduate} /> ‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢</h3>
                <div className={detailStyles.cardBody}>
                    {(data.assigned_programs || []).map((programId, index) => (
                        <div key={index} className={detailStyles.programItem}>
                            {/* ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç value ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö programId ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô Number */}
                            <select value={programId} onChange={e => handleProgramChange(index, e.target.value)}>
                                <option value="">-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£ --</option>
                                {/* ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Key ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô programs.json */}
                                {allPrograms.map(p => (
                                    <option key={p.id} value={p.id}>
                                        ({p.degreeLevel}) {p.name}
                                    </option>
                                ))}
                            </select>
                            <button type="button" className={detailStyles.removeBtn} onClick={() => handleRemoveProgram(index)}>
                                <FontAwesomeIcon icon={faTrashAlt} />
                            </button>
                        </div>
                    ))}
                    <button type="button" className={detailStyles.addBtn} onClick={handleAddProgram}>
                        <FontAwesomeIcon icon={faPlus} /> ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£
                    </button>
                </div>
            </div>
        </>
    );
};

// ‚úÖ‚úÖ‚úÖ ‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö AdviseesSection ‚úÖ‚úÖ‚úÖ
const AdviseesSection = ({ advisorId, allStudents }) => {

    // ‡πÉ‡∏ä‡πâ useMemo ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏£‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û
    const advisees = useMemo(() => {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏ß‡πà‡∏≤ allStudents ‡πÄ‡∏õ‡πá‡∏ô array ‡∏ó‡∏µ‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
        if (!allStudents || !Array.isArray(allStudents)) {
            return [];
        }

        // ‡∏Å‡∏£‡∏≠‡∏á‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡πÇ‡∏î‡∏¢‡πÄ‡∏ä‡πá‡∏Ñ‡∏à‡∏≤‡∏Å id ‡∏Ç‡∏≠‡∏á‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡∏´‡∏•‡∏±‡∏Å‡πÅ‡∏•‡∏∞‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡∏£‡πà‡∏ß‡∏°
        return allStudents.filter(student => 
            student.main_advisor_id === advisorId || 
            student.co_advisor1_id === advisorId || 
            student.co_advisor2_id === advisorId
        );
    }, [advisorId, allStudents]); // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡πà‡∏≤‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏õ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô

    return (
        <div className={detailStyles.card}>
            <h3>
                <FontAwesomeIcon icon={faUserGraduate} /> ‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡πÉ‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤ ({advisees.length})
            </h3>
            <div className={detailStyles.cardBody}>
                {/* ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß (advisees) ‡πÅ‡∏•‡∏∞ advisorId 
                  ‡πÑ‡∏õ‡∏¢‡∏±‡∏á AdviseeTable ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
                */}
                <AdviseeTable students={advisees} advisorId={advisorId} />
            </div>
        </div>
    );
};

// ‚úÖ‚úÖ‚úÖ ‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö PublicationsSection ‚úÖ‚úÖ‚úÖ
const PublicationsSection = ({ data, onArrayChange }) => {
    // State ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° UI ‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
    const [isAdding, setIsAdding] = useState(false);
    const [editingIndex, setEditingIndex] = useState(null);
    
    // State ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
    const [formData, setFormData] = useState({ title: '', publish_date: '', publication_type: '', attachment_file: '' });

    const handleInputChange = (e) => {
        const { name, value } = e.target;
        setFormData(prev => ({ ...prev, [name]: value }));
    };

    // --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ---
    const handleAddNew = () => {
        setFormData({ title: '', publish_date: '', publication_type: '', attachment_file: '' }); // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏°
        setIsAdding(true);
    };

    const handleCancelAdd = () => {
        setIsAdding(false);
    };

    const handleSaveNew = () => {
        if (!formData.title) {
            alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏•‡∏á‡∏≤‡∏ô');
            return;
        }
        const currentWorks = data.academic_works || [];
        onArrayChange('academic_works', [...currentWorks, formData]);
        setIsAdding(false);
    };

    // --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ---
    const handleEdit = (work, index) => {
        setEditingIndex(index);
        setFormData(work); // ‡∏ô‡∏≥‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏°‡∏°‡∏≤‡πÉ‡∏™‡πà‡πÉ‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏°
    };

    const handleCancelEdit = () => {
        setEditingIndex(null);
    };

    const handleSaveEdit = (index) => {
        if (!formData.title) {
            alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏•‡∏á‡∏≤‡∏ô');
            return;
        }
        const updatedWorks = (data.academic_works || []).map((work, i) => 
            i === index ? formData : work
        );
        onArrayChange('academic_works', updatedWorks);
        setEditingIndex(null);
    };

    // --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ---
    const handleDelete = (indexToDelete) => {
        if (window.confirm('‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏ú‡∏•‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?')) {
            const updatedWorks = (data.academic_works || []).filter((_, index) => index !== indexToDelete);
            onArrayChange('academic_works', updatedWorks);
        }
    };

    const renderFormRow = (onSave, onCancel) => (
        <tr className={detailStyles.newRow}>
            <td><input type="text" name="title" value={formData.title} onChange={handleInputChange} placeholder="‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏•‡∏á‡∏≤‡∏ô" className={styles.formControl} /></td>
            <td><input type="date" name="publish_date" value={formData.publish_date} onChange={handleInputChange} className={styles.formControl} /></td>
            <td><input type="text" name="publication_type" value={formData.publication_type} onChange={handleInputChange} placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏ß‡∏≤‡∏£‡∏™‡∏≤‡∏£ Q1, IEEE Conference" className={styles.formControl} /></td>
            <td><input type="text" name="attachment_file" value={formData.attachment_file} onChange={handleInputChange} placeholder="‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö" className={styles.formControl} /></td>
            <td className={detailStyles.actionCell}>
                <button className={detailStyles.actionBtnConfirm} onClick={onSave} title="‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å"><FontAwesomeIcon icon={faSave} /></button>
                <button className={detailStyles.actionBtnCancel} onClick={onCancel} title="‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å"><FontAwesomeIcon icon={faTimes} /></button>
            </td>
        </tr>
    );

    return (
        <div className={detailStyles.card}>
            <h3><FontAwesomeIcon icon={faFileAlt} /> ‡∏ú‡∏•‡∏á‡∏≤‡∏ô‡∏ï‡∏µ‡∏û‡∏¥‡∏°‡∏û‡πå</h3>
            <div className={detailStyles.cardBody}>
                <div className={detailStyles.tableWrapper}>
                    <table className={detailStyles.dataTable}>
                        <thead>
                            <tr>
                                <th>‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏•‡∏á‡∏≤‡∏ô</th>
                                {/* ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° className ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ */}
                                <th className={detailStyles.textCenter}>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏µ‡∏û‡∏¥‡∏°‡∏û‡πå</th>
                                <th className={detailStyles.textCenter}>‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡∏µ‡∏û‡∏¥‡∏°‡∏û‡πå</th>
                                <th className={detailStyles.textCenter}>‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö</th>
                                <th className={detailStyles.textCenter}></th>
                            </tr>
                        </thead>
                        <tbody>
                            {(data.academic_works || []).map((work, index) => 
                                editingIndex === index ? (
                                    renderFormRow(() => handleSaveEdit(index), handleCancelEdit)
                                ) : (
                                    <tr key={index}>
                                        <td>{work.title}</td>
                                        {/* ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° className ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ */}
                                        <td className={detailStyles.textCenter}>{work.publish_date}</td>
                                        <td className={detailStyles.textCenter}>{work.publication_type}</td>
                                        <td className={detailStyles.textCenter}>
                                            {work.attachment_file && (
                                                <a href={work.attachment_file} target="_blank" rel="noopener noreferrer" className={detailStyles.linkButton}>
                                                    ‡∏î‡∏π‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£
                                                </a>
                                            )}
                                        </td>
                                        <td className={detailStyles.textCenter}>
                                            <button className={detailStyles.actionBtn} title="‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç" onClick={() => handleEdit(work, index)}>
                                                <FontAwesomeIcon icon={faPencilAlt} />
                                            </button>
                                            <button className={detailStyles.actionBtn} title="‡∏•‡∏ö" onClick={() => handleDelete(index)}>
                                                <FontAwesomeIcon icon={faTrashAlt} />
                                            </button>
                                        </td>
                                    </tr>
                                )
                            )}
                            {isAdding && renderFormRow(handleSaveNew, handleCancelAdd)}
                            {(data.academic_works || []).length === 0 && !isAdding && (
                                <tr>
                                    <td colSpan="5" className={detailStyles.noDataRow}>‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏•‡∏á‡∏≤‡∏ô‡∏ï‡∏µ‡∏û‡∏¥‡∏°‡∏û‡πå</td>
                                </tr>
                            )}
                        </tbody>
                    </table>
                </div>
                {!isAdding && (
                    <button type="button" className={detailStyles.addBtn} onClick={handleAddNew} style={{marginTop: '20px'}}>
                        <FontAwesomeIcon icon={faPlus} /> ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏•‡∏á‡∏≤‡∏ô‡∏ï‡∏µ‡∏û‡∏¥‡∏°‡∏û‡πå
                    </button>
                )}
            </div>
        </div>
    );
};


// --- Main Component ---
function ManageAdvisorDetailPage() {
    const { advisorId } = useParams();
    const navigate = useNavigate();
    const [activeSection, setActiveSection] = useState('account');
    const [advisorData, setAdvisorData] = useState(null);
    const [originalData, setOriginalData] = useState(null);
    const [relatedData, setRelatedData] = useState({ allStudents: [], allPrograms: [] });
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);

    // ‚úÖ 1. ‡πÄ‡∏û‡∏¥‡πà‡∏° State ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
    const [isDirty, setIsDirty] = useState(false);

 // ‚úÖ‚úÖ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç useEffect ‡∏ô‡∏µ‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‚úÖ‚úÖ‚úÖ
    useEffect(() => {
        const fetchData = async () => {
            try {
                const [advisorsRes, studentsRes, programsRes] = await Promise.all([
                    fetch('/data/advisor.json'),
                    fetch('/data/student.json'),
                    fetch('/data/structures/programs.json') 
                ]);

                if (!advisorsRes.ok || !studentsRes.ok || !programsRes.ok) {
                    throw new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡πÑ‡∏î‡πâ');
                }

                const advisorsFromFile = await advisorsRes.json();
                const allStudents = await studentsRes.json();
                const allPrograms = await programsRes.json();

                // 1. ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å Local Storage (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
                const savedAdvisors = JSON.parse(localStorage.getItem('savedAdvisors'));

                // 2. ‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡∏Ñ‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
                let currentAdvisor;
                if (savedAdvisors) {
                    // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Storage, ‡πÉ‡∏´‡πâ‡∏´‡∏≤‡∏à‡∏≤‡∏Å‡πÉ‡∏ô Storage ‡∏Å‡πà‡∏≠‡∏ô
                    currentAdvisor = savedAdvisors.find(a => a.advisor_id === advisorId);
                }
                
                if (!currentAdvisor) {
                    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡πÉ‡∏ô Storage (‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ Storage), ‡πÉ‡∏´‡πâ‡∏´‡∏≤‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå
                    currentAdvisor = advisorsFromFile.find(a => a.advisor_id === advisorId);
                }

                if (!currentAdvisor) {
                    throw new Error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå");
                }

                // 3. ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°
                const advisorWithDefaults = {
                    ...currentAdvisor,
                    roles: currentAdvisor.roles || [],
                    assigned_programs: currentAdvisor.assigned_programs || [],
                    academic_works: currentAdvisor.academic_works || [],
                    password: '',
                    confirm_password: '',
                    gender_other: currentAdvisor.gender_other || '' // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ
                };
                
                setAdvisorData(advisorWithDefaults);
                setOriginalData(_.cloneDeep(advisorWithDefaults));
                setRelatedData({ allStudents, allPrograms });

            } catch (err) {
                setError(err.message);
            } finally {
                setLoading(false);
            }
        };
        fetchData();
    }, [advisorId]);

    // ‚úÖ 2. ‡πÄ‡∏û‡∏¥‡πà‡∏° useEffect ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    useEffect(() => {
        if (originalData && advisorData) {
            // ‡πÉ‡∏ä‡πâ lodash ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö object/array ‡∏ó‡∏µ‡πà‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô
            const hasChanges = !_.isEqual(originalData, advisorData);
            setIsDirty(hasChanges);
        }
    }, [advisorData, originalData]);

    // ‚úÖ 3. ‡πÄ‡∏û‡∏¥‡πà‡∏° useEffect ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏±‡∏Å‡∏à‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤/‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä
    useEffect(() => {
        const handleBeforeUnload = (event) => {
            if (isDirty) {
                event.preventDefault();
                // Browser ‡∏™‡πà‡∏ß‡∏ô‡πÉ‡∏´‡∏ç‡πà‡∏à‡∏∞‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏Å‡∏≥‡∏´‡∏ô‡∏î ‡πÅ‡∏ï‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡πÅ‡∏ó‡∏ô
                event.returnValue = ''; 
            }
        };

        window.addEventListener('beforeunload', handleBeforeUnload);

        // Cleanup function: ‡∏•‡∏ö event listener ‡∏≠‡∏≠‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠ component ‡∏ñ‡∏π‡∏Å unmount
        return () => {
            window.removeEventListener('beforeunload', handleBeforeUnload);
        };
    }, [isDirty]); // ‡πÉ‡∏´‡πâ effect ‡∏ô‡∏µ‡πâ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏°‡∏∑‡πà‡∏≠ isDirty ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á


    const handleInputChange = useCallback((e) => {
        const { name, value } = e.target;
        setAdvisorData(prev => ({ ...prev, [name]: value }));
    }, []);

    const handleArrayChange = useCallback((fieldName, newArray) => {
        setAdvisorData(prev => ({ ...prev, [fieldName]: newArray }));
    }, []);

    const handleSave = () => {
        console.log("Saving data:", advisorData);
        
        let allAdvisors = JSON.parse(localStorage.getItem('savedAdvisors') || '[]');
        const index = allAdvisors.findIndex(a => a.advisor_id === advisorId);

        if (index > -1) {
            allAdvisors[index] = advisorData;
        } else {
            allAdvisors.push(advisorData);
        }

        localStorage.setItem('savedAdvisors', JSON.stringify(allAdvisors));
        
        // ‚úÖ 4. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï originalData ‡πÅ‡∏•‡∏∞ isDirty ‡∏´‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
        setOriginalData(_.cloneDeep(advisorData)); 
        setIsDirty(false); // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô false ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡πâ‡∏ß
        
        alert("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
    };
    
    // ‚úÖ 5. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡∏ó‡∏≤‡∏á
    const handleNavigation = (path) => {
        if (isDirty) {
            if (window.confirm("‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?")) {
                navigate(path);
            }
        } else {
            navigate(path);
        }
    };

    const renderSection = () => {
        if (!advisorData) return null;
        switch (activeSection) {
            case 'account': return <AccountSection data={advisorData} onInputChange={handleInputChange} />;
            case 'info': return <InfoSection data={advisorData} onInputChange={handleInputChange} />;
            case 'roles': return <RolesSection data={advisorData} onArrayChange={handleArrayChange} onInputChange={handleInputChange} allPrograms={relatedData.allPrograms} />;
            case 'advisees': return <AdviseesSection advisorId={advisorId} allStudents={relatedData.allStudents} />;
            case 'publications': return <PublicationsSection data={advisorData} onArrayChange={handleArrayChange} />;
            default: return <AccountSection data={advisorData} onInputChange={handleInputChange} />;
        }
    };

    if (loading) return <div className={detailStyles.pageContainer}>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...</div>;
    if (error) return <div className={detailStyles.pageContainer}>‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {error}</div>;
    if (!advisorData) return <div className={detailStyles.pageContainer}>‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</div>;

    return (
        <div className={detailStyles.pageLayout}>
            {/* ‚úÖ 6. ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô onClick ‡∏Ç‡∏≠‡∏á‡∏õ‡∏∏‡πà‡∏° Back ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ handleNavigation */}
            <Sidebar 
                advisor={advisorData} 
                activeSection={activeSection} 
                setActiveSection={setActiveSection} 
                onBack={() => handleNavigation('/admin/manage-users')} 
            />
            <main className={detailStyles.mainContent}>
                <div className={detailStyles.contentHeader}>
                    <h1><FontAwesomeIcon icon={faUserTie} /> ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå</h1>
                    {/* ‚úÖ 7. (‡∏ó‡∏≤‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å) ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏õ‡∏∏‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏î‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á */}
                    <button 
                        className={styles.btnPrimary} 
                        onClick={handleSave}
                        disabled={!isDirty}
                    >
                        <FontAwesomeIcon icon={faSave} /> ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
                    </button>
                </div>
                {renderSection()}
            </main>
        </div>
    );
}

export default ManageAdvisorDetailPage;